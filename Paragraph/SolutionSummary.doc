{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f4\fswiss\fprq2\fcharset0 Liberation Sans{\*\falt Arial};}{\f5\fnil\fprq2\fcharset128 Libre Baskerville;}{\f6\fnil\fprq2\fcharset0 Microsoft YaHei;}{\f7\fnil\fprq2\fcharset0 Lucida Sans;}{\f8\fswiss\fprq0\fcharset128 Lucida Sans;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet{\s0\snext0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af9\langfe2052\dbch\af7\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033 Normal;}
{\s15\sbasedon0\snext16\sb240\sa120\keepn\dbch\af6\dbch\af7\afs28\loch\f4\fs28 Heading;}
{\s16\sbasedon0\snext16\sl288\slmult1\sb0\sa140 Text Body;}
{\s17\sbasedon16\snext17\sl288\slmult1\sb0\sa140\dbch\af8 List;}
{\s18\sbasedon0\snext18\sb120\sa120\noline\i\dbch\af8\afs24\ai\fs24 Caption;}
{\s19\sbasedon0\snext19\noline\dbch\af8 Index;}
}{\*\generator LibreOffice/5.2.1.2$Windows_x86 LibreOffice_project/31dd62db80d4e60af04904455ec9c9219178d620}{\info{\creatim\yr0\mo0\dy0\hr0\min0}{\revtim\yr2022\mo5\dy19\hr19\min7}{\printim\yr0\mo0\dy0\hr0\min0}}{\*\userprops}\deftab709
\viewscale100
{\*\pgdsctbl
{\pgdsc0\pgdscuse451\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt0 Default Style;}}
\formshade\paperh15840\paperw12240\margl1134\margr1134\margt1134\margb1134\sectd\sbknone\sectunlocked1\pgndec\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
{\*\ftnsep\chftnsep}\pgndec\pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af9\langfe2052\dbch\af7\afs24\alang1081\loch\f3\hich\af3\fs24\lang1033{\rtlch \ltrch\loch\loch\f5\hich\af5
The solution I went for on ingesting logs in this particular challenge was using logstash stdin for my input plugin, a combination of grok and mutate for my filter plugins, and stdout and file for my output plugins.  Originally I was aiming to use file for my input plugin as well, but due to some file permission issues a quicker result was achieved via stdin.  I briefly explored beats for input and elasticsearch for output, but both those solutions would have required some significant creep of scope.  Once the log was being ingested via stdin, I tested out some parsing with a single match case in grok using the grok debugger, but some of the special characters were proving problamtic. Digging through the grok plugin filter page, I found both QUOTEDSTRING and break_on_match, which was the simplest way I could capture the fields without writing a significant amount of custom regex.  I used mutuate's update to transform the severity numbers to the text output required, with a series of if and else if statements.  Finally I used an extremely useful gsub mutation to strip out the excessive double quotes I was pulling into my fields from my QUOTEDSTRING grok pattern. I reviewed the output initially in the console via stdout, then checked the output file to insure logstash was writing to the file as expected.  Finally, I created several logs with altered data and ran them through logstash to ensure my filter could handle different data in the fields.}
\par }